#!/usr/bin/env node
const { Command } = require('commander'),
  os = require('os'),
  path = require('path'),
  _ = require('lodash'),
  cliProgress = require('cli-progress'),
  { RunnerRuntime } = require("apipost-runtime8"),
  fetch = (...args) => import('node-fetch').then(({ default: fetch }) => fetch(...args)),
  // packageJson = require('../package.json'),
  program = new Command(),
  {
    reportersCLI,
    setUserOption,
    reportersJSON,
    reportersHTML,
    reportersHOOK
  } = require("./libs/utils"),

  cliOption = {
    reporters: 'cli',
    outDir: path.join(os.homedir(), "/apipost-reports"),
    outFile: '',
    iterationData: '',
    iterationCount: 1,
    ignoreRedirects: 0,
    maxRequestLoop: 5,
    timeoutRequest: 0,
    timeoutScript: 5000,
    delayRequest: 0,
    externalProgramPath: process.cwd(),
    insecure: 1,
    rejectUnauthorized: 1,
    sslClientCertList: '', //客户端证书配置列表文件的路径。此选项优先于sslClientCert、sslClientKey和sslClientPassphrase。
    sslClientCert: '', //"certificate": '', // 客户端证书地址
    sslClientKey: '', // "key": '', //客户端证书私钥文件地址
    sslClientPassphrase: '', //  "passphrase": '' // 私钥密码
    sslClientPfx: '', //"pfx": '', // pfx 证书地址
    sslExtraCaCerts: '', //"certificateAuthority": '', // ca证书地址
    webHook: ''
  }

const parseCommandString = async (url, options) => {
  let runnerEvent = {};
  let errStr = '';

  if (!_.startsWith(url, 'https://') && !_.startsWith(url, 'http://')) { // 本地文件
    try {
      const data = fs.readFileSync(url, 'utf8');
      try {
        resJson = JSON.parse(data);
        _.assign(runnerEvent, resJson)
      } catch (e) {
        errStr = String(e);
      }
    } catch (e) {
      errStr = String(e);
    }
  } else { // 远程文件
    try {
      const response = await fetch(url, {
        rejectUnauthorized: false
      })

      try {
        const resJson = await response.json();
        if (resJson?.code == 10000 && resJson?.msg == 'success') {
          errStr = `The CLI link generated by your current Apipost v7 version, please download version 1.0.19 of apipost-cli (npm install -g apipost-cli@1.0.19).`;
        } else {
          if (resJson?.code == 0 && _.isObject(resJson?.data)) {
            _.assign(runnerEvent, resJson?.data?.runner || resJson?.data)
          } else {
            errStr = resJson?.msg
          }
        }
      } catch (e) {
        errStr = String(e);
      }
    } catch (e) {
      errStr = String(e);
    }
  }

  if (errStr != '') {
    console.error(`Execution failed: ${errStr}`)
  } else {
    if (_.isArray(_.get(runnerEvent, 'test_events')) && _.isObject(_.get(runnerEvent, 'option'))) {
      // 开始执行runtime
      let processStart = true;
      let processBar = new cliProgress.SingleBar({}, cliProgress.Presets.rect);
      const emitRuntimeEvent = function (data) {
        switch (data?.action) {
          case 'complete': // 完成
            processBar.stop();
            console.log(`\n Test cases execution completed. \n`)
            reportersCLI(data); // 打印结果到CLI

            if (_.includes(options?.reporters, 'json')) {
              reportersJSON(data, options); // 将json写入文件
            }

            if (_.includes(options?.reporters, 'html')) {
              reportersHTML(data, options); // 将html写入文件
            }

            if (_.startsWith(options?.webHook, 'http://') || _.startsWith(options?.webHook, 'https://')) {
              reportersHOOK(data, options); // 将json报告抛给webhook
            }
            break;
          case 'process': // 进度条
            const { processTotalCount, processCurrentCount } = _.get(data, 'data') || {}
            if (processStart) {
              console.log(`\n Currently executing test cases... \n`)
              processStart = false;
              processBar.start(_.max([1, _.toInteger(processTotalCount)]), 0);
            }

            if (!processStart) {
              processBar.update(_.min([_.toInteger(processTotalCount) - 0.01, _.toInteger(processCurrentCount)]));
            }
            break;
        }
      }

      const { option, test_events } = runnerEvent;
      // 设置用户指定选项
      await setUserOption(options, option, cliOption);
      const myRuntime = new RunnerRuntime(option, test_events); //创建对象
      await myRuntime.run(emitRuntimeEvent); //等等任务，并且增加回调
    } else {
      console.error(`The file returned by the following URL is not in standard format."(${url})`, runnerEvent);
    }
  }
};

program.version('2.0.0', '-v, --version', 'apipost-cli 当前版本')
const bindEvent = (program) => {
  program.command('run <url>')
    .option('-r, --reporters <reporters>', `指定测试报告类型, 支持 cli,html,json `, `${cliOption.reporters}`)
    .option('-n, --iteration-count <n>', `设置循环次数。默认值 ${cliOption.iterationCount}`)
    .option('-d, --iteration-data <path>', `设置用例循环的 [公共] 测试数据路径 (JSON 或 CSV)。如设置将替换默认 [公共] 测试数据。`)
    .option('--external-program-path <path>', `指定 [外部程序] 的所处文件路径，默认值为命令当前执行目录`)
    .option('--out-dir <outDir>', `输出测试报告目录，默认目录为: ${cliOption.outDir}`)
    .option('--out-file <outFile>', '输出测试报告文件名，不需要添加后缀，默认格式为 apipost-reports-当前 YYYY-MM-DD HH:mm:ss')
    .option('--ignore-redirects <0/1>', `阻止 Apipost 自动重定向返回 3XX 状态码的请求。0 阻止, 1 不阻止`, `${cliOption.ignoreRedirects}`)
    .option('--max-request-loop <n>', `3XX重定向时的最大定向次数`, cliOption.maxRequestLoop)
    .option('--timeout-request <n>', `指定接口请求超时时间`, cliOption.timeoutRequest)
    .option('--timeout-script <n>', '指定脚本预执行/后执行接口运行超时时间', cliOption.timeoutScript)
    .option('--delay-request <n>', `指定请求之间停顿间隔 (default: ${cliOption.delayRequest})`, cliOption.delayRequest)
    .option('-k --insecure <n>', `关闭 SSL 校验 (1 关闭, 0 开启。default: ${cliOption.insecure})`, cliOption.insecure)
    .option('--ssl-client-cert-list <path>', `客户端证书配置文件(JSON)的路径。此选项优先于sslClientCert、sslClientKey和sslClientPassphrase。`)
    .option('--ssl-client-cert <path>', `指定客户端证书路径 (CRT file)`)
    .option('--ssl-client-pfx <path>', `指定客户端证书路径 (PFX file)`)
    .option('--ssl-client-key <path>', `指定客户端证书私钥路径 (KEY file) `)
    .option('--ssl-client-passphrase <passphrase>', `指定客户端证书密码 (for protected key)`)
    .option('--ssl-extra-ca-certs <path>', `指定额外受信任的 CA 证书 (PEM)`)
    // .option('--cache-dir <path>', `临时文件夹，当默认临时文件夹不可用时主动指定`)
    .option('--web-hook <url>', `Web-hook用于在任务完成后向指定URL发送JSON报告数据 (POST) `)
    .action((url, options) => {
      parseCommandString(url, options)
    });

  program.on('-h --help', () => {
    console.log('如何使用 Apipost');
  });
  program.parse();
}

const init = () => {
  bindEvent(program);
}

init();
